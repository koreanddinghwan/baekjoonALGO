# 평소 반상회에 참석하는 것을 좋아하는 주희는 이번 기회에 부녀회장이 되고 싶어 각 층의 사람들을 불러 모아 반상회를 주최하려고 한다.

# 이 아파트에 거주를 하려면 조건이 있는데, “a층의 b호에 살려면 자신의 아래(a-1)층의 1호부터 b호까지 사람들의 수의 합만큼 사람들을 데려와 살아야 한다” 는 계약 조항을 꼭 지키고 들어와야 한다.

# 아파트에 비어있는 집은 없고 모든 거주민들이 이 계약 조건을 지키고 왔다고 가정했을 때, 주어지는 양의 정수 k와 n에 대해 k층에 n호에는 몇 명이 살고 있는지 출력하라. 단, 아파트에는 0층부터 있고 각층에는 1호부터 있으며, 0층의 i호에는 i명이 산다.

# 입력
# 첫 번째 줄에 Test case의 수 T가 주어진다. 그리고 각각의 케이스마다 입력으로 첫 번째 줄에 정수 k, 두 번째 줄에 정수 n이 주어진다

#메모이제이션을 이용한 문제풀이
#메모이제이션: 캐시를 이용해 재귀함수의 답을 저장하면서 재귀함수를 호출한다.

#캐싱할 테이블 구조
#[[1,2,3,4,5,6,7,8,9,10,11,12,13,14], 0층   
#[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], 1층
#[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], 2층
#[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], 3층
#[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], 4층
#[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], 5층
# ]
#피보나치수열처럼 각 층의 1호는 모두 1이다.
#k층 n호라면 실제 인덱스로 호출되려면
#apart(k,n-1) 이 되어야한다.


def apart(a,b): #a층b호
    if a == 0:
        return b
    if b == 1:
        return 1

        
    if lst[a][b-1] == -1: #만약 a층 b호가 계산이 안되어있다면,
        lst[a][b-1] = apart(a,b-1) + apart(a-1,b)
        


    return lst[a][b-1]

lst = [[-1 for i in range(15)]for j in range(15)] # n,k가 14층,14호까지 있으므로, 초기값을 14*14 2차원 배열로 나타낸다.
                                                  # 리스트를 for문 바깥에 두면, 초기화되지 않고 계산값을 유지한다.

import sys

t = int(sys.stdin.readline().rstrip())


for i in range(t):
    # lst = [[-1 for i in range(15)]for j in range(15)]
    k = int(sys.stdin.readline().rstrip()) #n,k는 1이상 14이하이다. 따라서 최대 14층, 14호까지 있다.
    n = int(sys.stdin.readline().rstrip()) 

    print(apart(k,n))










